When would you want to use a remote repository rather than keeping all your work local?
If you have an open source project you want to share, a remote repository is a good idea.  If you have code that you worked on and you want to look at online, pushing it onto a remote repository is also a good idea. You can also share your work online to demonstrate your work to potential employers or colleagues.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
You could want full control of your local and not pull in any changes just yet. If Git automatically pulls for you and you might not expect it, this could cause confusion.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
A branch is an action on a local repository where you make a copy of a commit and begin making changes on this parallel copy. It is useful for testing out new features or perhaps debugging a fix you want to test before merging back with the master branch.  A branch can only be performed when you have a clone or fork of a repository.
A clone is a copy of a repository from either a local repository or a remote repository. The clone will contain all the information of the cloned(original) repository such as commit information.
A fork is an operation in GitHub that allows you to copy a repository directly into your GitHub account. You can then clone it into your local machine or make changes directly in GitHub.
You would fork instead of clone if you want to save the step of cloning someone's repository and then committing and pushing it back into your account. Forking also allows users to see where the original repository was and also to give credit to the original owner.

What is the benefit of having a copy of the last known state of the remote stored locally?
If you are offline and make changes to your local clone of the remote repository, you can view how many commits ahead of the remote you are.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would most likely have more meetings, or ensure that each author only modifies or exclusively owns files that no one else can modify. If a file needs modification by both users, I would find a way to 'lock' that file or have a system where there is still a global owner that would have control of that file.  It would be easier in that perhaps the separation of work is more well defined since each author exclusively owns a file or set of files. It would be harder because there is no revision control that can keep track of changes.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
I would make changes in a separate branch if I'm experimenting with a new feature or a fix to a bug in the master that I'm not sure will fix the bug. Also if there are may collaborators on the project it's cleaner to have a separate branch so as not to disturb the master branch.  Editing directly in the master is good for simple, direct fixes, perhaps typos in the comments section or clarifications through commenting the code.  It's also potentially less 'bookkeeping' by editing the master branch directly.
